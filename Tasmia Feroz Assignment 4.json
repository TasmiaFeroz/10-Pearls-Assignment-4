{
  "info": {
    "name": "Assignment No. 4 \u2013 API Testing with Postman",
    "_postman_id": "7e30a4f0-9a23-4cc8-9fcb-2025a4e1fa00",
    "description": "This collection demonstrates API testing using multiple HTTP methods, variable handling, assertions, and API chaining.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. GET - Get All Books",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "console.log('Books List:', response);",
              "pm.environment.set('firstBookId', response[0].id);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/books",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "books"
          ]
        }
      }
    },
    {
      "name": "2. POST - Create Order",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const randomName = `Customer_${Math.floor(Math.random() * 1000)}`;",
              "pm.environment.set('customerName', randomName);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "const jsonData = pm.response.json();",
              "pm.environment.set('orderId', jsonData.orderId);",
              "console.log('Order Created:', jsonData);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"{{customerName}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "orders"
          ]
        }
      }
    },
    {
      "name": "3. PUT - Update Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "console.log('PUT Response:', pm.response.json());"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"customerName\": \"{{customerName}}_Updated\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "orders",
            "{{orderId}}"
          ]
        }
      }
    },
    {
      "name": "4. PATCH - Update Order Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Failing Case Example', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(100); // intentionally failing",
              "});",
              "console.log('PATCH Response:', pm.response.json());"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"status\": \"completed\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "orders",
            "{{orderId}}"
          ]
        }
      }
    },
    {
      "name": "5. DELETE - Delete Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "console.log('Order Deleted:', pm.environment.get('orderId'));"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/{{orderId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "orders",
            "{{orderId}}"
          ]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://simple-books-api.glitch.me"
    }
  ]
}